// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    //Mux16(a=aReg, b=false, sel=reset, out[0..14]=pc);
    PC(in=aReg, load=load, inc=inc, reset=reset, out[0..14]=pc);

    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=reg1);
    //And(a=instruction[15], b=instruction[5], out=aBit);
    Mux(a=true, b=instruction[5], sel=instruction[15], out=aBit);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=dBit);

    //if And16(reg1,instruction) or reg1==instruction, then
    //      it is an a-instruction, and it should be addressM
    //else:
    //      it is a c-instruction, and should go into ARegister
    
    ARegister(in=reg1, load=aBit, out=aReg, out[0..14]=addressM);
    DRegister(in=reg2, load=dBit, out=dReg);

    And(a=instruction[15], b=instruction[3], out=writeM);

    Mux16(a=aReg, b=inM, sel=instruction[12], out=aRegOrMemory);

    ALU(
      x=dReg, 
      y=aRegOrMemory, 
      zx=instruction[11], 
      nx=instruction[10], 
      zy=instruction[9], 
      ny=instruction[8], 
      f =instruction[7], 
      no=instruction[6], 

      out=aluOut,
      out=reg2,
      out=outM,

      zr=zr, 
      ng=ng
    );

    // Load bit (jump instruction)
    //JEQ
    And(a=instruction[1], b=zr, out=jeq);
    //JLT
    And(a=instruction[2], b=ng, out=jlt);
    //JGT
    Not(in=lessThanEqZero, out=positive);
    And(a=instruction[0], b=positive, out=jgt);
    //JGE
    And(a=jeq, b=instruction[0], out=jge);
    //JLE
    Or(a=zr, b=ng, out=lessThanEqZero);
    Or(a=jeq, b=jlt, out=jle);
    //Unconditional
    Or(a=jle, b=jgt, out=unconditional);

    And(a=instruction[15], b=unconditional, out=load);
    Not(in=load, out=inc);


    
}